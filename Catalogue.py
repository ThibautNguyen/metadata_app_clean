import streamlit as st
import pandas as pd
import sys
from pathlib import Path
import json

# Ajout du r√©pertoire parent au PYTHONPATH
sys.path.append(str(Path(__file__).parent))
from db_utils import test_connection, init_db, get_metadata, get_metadata_columns

# Configuration de la page
st.set_page_config(
    page_title="Catalogue des m√©tadonn√©es",
    page_icon="üìö",
    layout="wide"
)

# CSS pour le style de l'interface
st.markdown("""
<style>
    /* Styles g√©n√©raux */
    .main {
        max-width: 1200px;
        margin: 0 auto;
    }
    
    /* Style du titre */
    .main h1 {
        color: #1E4B88;
        font-size: 2.2rem;
        margin-bottom: 0.8rem;
    }
    
    /* Style des titres de section */
    .main h2 {
        color: #333;
        font-size: 1.5rem;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #e0e0e0;
    }
    
    /* Style des conteneurs */
    .stExpander {
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        margin-bottom: 1rem;
    }
    
    /* Style des boutons */
    .stButton button {
        background-color: #1E88E5;
        color: white;
        font-weight: 500;
        border-radius: 4px;
    }
    
    /* Style du bouton de recherche */
    .stButton.search button {
        background-color: #4CAF50;
        width: 100%;
    }
    
    /* Style des messages d'information */
    .stInfo {
        background-color: #E3F2FD;
        padding: 16px;
        border-radius: 5px;
        border-left: 5px solid #1E88E5;
    }
    
    /* Style des messages d'avertissement */
    .stWarning {
        background-color: #FFF8E1;
        padding: 16px;
        border-radius: 5px;
        border-left: 5px solid #FFC107;
    }
    
    /* Style des messages d'erreur */
    .stError {
        background-color: #FFEBEE;
        padding: 16px;
        border-radius: 5px;
        border-left: 5px solid #F44336;
    }
    
    /* Style des tableaux */
    .stDataFrame {
        border: 1px solid #e0e0e0;
        border-radius: 5px;
    }
    
    /* Style des cases √† cocher */
    .stCheckbox label {
        font-weight: 500;
        color: #333;
    }
    
    /* Style des conteneurs expandables */
    button[data-baseweb="accordion"] {
        background-color: #f8f9fa;
        border-radius: 5px;
        margin-bottom: 8px;
        border-left: 4px solid #1E88E5;
    }
    
    /* Style des liens de t√©l√©chargement */
    .stDownloadButton button {
        background-color: #4CAF50;
        color: white;
    }
    
    /* Style pour les blocs de code */
    .stCode {
        background-color: #f5f5f5;
        border-radius: 5px;
        border: 1px solid #e0e0e0;
    }
    
    /* Style pour les onglets */
    .stTabs [data-baseweb="tab-list"] {
        gap: 1rem;
    }
    .stTabs [data-baseweb="tab"] {
        padding: 0.5rem 1rem;
        font-size: 1rem;
        font-weight: 500;
    }
    .stTabs [data-baseweb="tab-highlight"] {
        background-color: #1E88E5;
    }
    
    /* Style pour les entr√©es de recherche */
    .stTextInput > div > div {
        border-radius: 5px;
    }
    .stTextInput input {
        font-size: 1rem;
    }
    
    /* Style pour le s√©lecteur */
    .stSelectbox > div > div {
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# Titre et description
st.title("Catalogue des m√©tadonn√©es")
st.write("Recherchez et explorez les m√©tadonn√©es disponibles pour vos analyses et projets.")

# Initialisation automatique de la base de donn√©es
try:
    init_db()
except Exception as e:
    st.error(f"Erreur lors de l'initialisation : {str(e)}")

# Interface de recherche
st.markdown("## Recherche")
col1, col2 = st.columns([3, 1])

with col1:
    search_text = st.text_input("Rechercher", placeholder="Entrez un terme √† rechercher...")
    if search_text:
        st.caption("La recherche s'effectue dans le nom de la base, le producteur, la description et le sch√©ma")

with col2:
    selected_schema = st.selectbox("Filtrer par sch√©ma", 
                                ["Tous", "economie", "education", "energie", "environnement", 
                                 "geo", "logement", "mobilite", "population", "securite"])

# R√©cup√©ration des m√©tadonn√©es depuis la base de donn√©es
if search_text:
    # Utiliser la fonction de recherche g√©n√©rique de get_metadata
    metadata_results = get_metadata(search_text)
elif selected_schema and selected_schema != "Tous":
    # Filtrer par sch√©ma uniquement
    metadata_results = get_metadata({"schema": selected_schema})
else:
    # R√©cup√©rer toutes les m√©tadonn√©es
    metadata_results = get_metadata()

# Afficher le nombre total de m√©tadonn√©es
st.info(f"Nombre total de m√©tadonn√©es disponibles : {len(metadata_results)}")

# Affichage des r√©sultats
st.markdown("## R√©sultats")

if metadata_results:
    # Cr√©ation d'un conteneur avec style
    st.markdown('<div class="results-container" style="background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">', unsafe_allow_html=True)
    
    # Affichage du nombre de r√©sultats
    st.info(f"{len(metadata_results)} m√©tadonn√©es trouv√©es")
    
    # Conversion des r√©sultats en DataFrame avec gestion des cl√©s manquantes
    results_df = pd.DataFrame([
        {
            "Nom de la table": meta.get("nom_table", "") or meta.get("nom_base", "") or meta.get("nom_fichier", "Non sp√©cifi√©"),
            "Producteur de la donn√©e": meta.get("producteur", "Non sp√©cifi√©"),
            "Sch√©ma du SGBD": meta.get("schema", "Non sp√©cifi√©"),
            "Granularit√© g√©ographique": meta.get("granularite_geo", "Non sp√©cifi√©e"),
            "Mill√©sime/ann√©e": meta.get("millesime", meta.get("date_creation", "")).strftime("%Y") if meta.get("millesime") or meta.get("date_creation") else "Non sp√©cifi√©",
            "Derni√®re mise √† jour": meta.get("date_maj", "").strftime("%d/%m/%Y") if meta.get("date_maj") else "Non sp√©cifi√©e"
        }
        for meta in metadata_results
    ])

    # R√©organiser les colonnes selon l'ordre demand√©
    columns_order = ["Nom de la table", "Producteur de la donn√©e", "Sch√©ma du SGBD", "Granularit√© g√©ographique"]
    all_columns = list(results_df.columns)
    remaining_columns = [col for col in all_columns if col not in columns_order]
    ordered_columns = columns_order + remaining_columns
    
    # Afficher le tableau avec les colonnes r√©organis√©es et style am√©lior√©
    st.dataframe(results_df[ordered_columns], use_container_width=True)

    # Option pour afficher les d√©tails
    with st.expander("Afficher les d√©tails complets des m√©tadonn√©es", expanded=False):
        # Affichage d√©taill√© des m√©tadonn√©es
        for i, meta in enumerate(metadata_results):
            with st.expander(f"üìÑ {meta.get('nom_table', '') or meta.get('nom_base', '') or 'M√©tadonn√©e ' + str(i+1)}", expanded=False):
                # Utilisation de colonnes pour l'affichage
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("##### Informations de base")
                    st.write(f"- **Nom de la table :** {meta.get('nom_table', 'Non sp√©cifi√©') or meta.get('nom_base', 'Non sp√©cifi√©')}")
                    st.write(f"- **Producteur de la donn√©e :** {meta.get('producteur', 'Non sp√©cifi√©')}")
                    st.write(f"- **Sch√©ma du SGBD :** {meta.get('schema', 'Non sp√©cifi√©')}")
                    st.write(f"- **Granularit√© g√©ographique :** {meta.get('granularite_geo', 'Non sp√©cifi√©e')}")
                    st.write(f"- **Nom de la base de donn√©es :** {meta.get('nom_base', 'Non sp√©cifi√©')}")
                    millesime = meta.get("millesime") or meta.get("date_creation")
                    st.write(f"- **Mill√©sime/ann√©e :** {millesime.strftime('%Y') if millesime else 'Non sp√©cifi√©'}")
                    st.write(f"- **Derni√®re mise √† jour :** {meta.get('date_maj', '').strftime('%d/%m/%Y') if meta.get('date_maj') else 'Non sp√©cifi√©e'}")
                
                with col2:
                    st.markdown("##### Informations suppl√©mentaires")
                    st.write(f"- **Source (URL) :** {meta.get('source', 'Non sp√©cifi√©e')}")
                    st.write(f"- **Fr√©quence de mise √† jour :** {meta.get('frequence_maj', 'Non sp√©cifi√©e')}")
                    st.write(f"- **Licence d'utilisation :** {meta.get('licence', 'Non sp√©cifi√©e')}")
                    st.write(f"- **Personne remplissant le formulaire :** {meta.get('envoi_par', 'Non sp√©cifi√©e')}")
                
                # Description sur toute la largeur
                st.markdown("##### Description")
                description_text = meta.get('description', 'Pas de description disponible')
                if description_text and len(description_text) > 10:  # V√©rification que la description existe et n'est pas vide
                    st.markdown(f"<div style='background-color: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 3px solid #1E88E5;'>{description_text}</div>", unsafe_allow_html=True)
                else:
                    st.markdown("<div style='background-color: #f8f9fa; padding: 10px; border-radius: 5px; color: #777;'>Pas de description disponible</div>", unsafe_allow_html=True)
                
                # Onglets pour le contenu CSV et le dictionnaire
                if meta.get('contenu_csv') or meta.get('dictionnaire'):
                    data_tab, dict_tab = st.tabs(["Contenu CSV", "Dictionnaire des variables"])
                    
                    with data_tab:
                        if meta.get('contenu_csv'):
                            st.markdown("##### Aper√ßu des donn√©es")
                            # Affichage du contenu CSV (code existant)
                            try:
                                contenu_csv = meta['contenu_csv']
                                # Si c'est une cha√Æne, essayer de la d√©coder en JSON
                                if isinstance(contenu_csv, str):
                                    try:
                                        contenu_csv = json.loads(contenu_csv)
                                    except json.JSONDecodeError as e:
                                        st.warning(f"Erreur lors du d√©codage JSON du contenu CSV : {str(e)}")
                                        st.info("Contenu brut : " + str(meta['contenu_csv'])[:200] + "...")
                                        continue  # Passer √† l'√©l√©ment suivant
                                
                                # V√©rifier si le contenu CSV a un format valide
                                if isinstance(contenu_csv, dict):
                                    # Assouplir la v√©rification du format - accepter diff√©rentes structures
                                    header = contenu_csv.get('header', [])
                                    data = contenu_csv.get('data', [])
                                    separator = contenu_csv.get('separator', ';')
                                    
                                    has_valid_data = len(data) > 0
                                    has_valid_header = len(header) > 0
                                    
                                    if has_valid_data and has_valid_header:
                                        st.caption(f"S√©parateur utilis√©: '{separator}'")
                                        
                                        # Traitement des donn√©es
                                        data_rows = []
                                        
                                        # Traiter chaque ligne de donn√©es
                                        for row in data:
                                            # Si la ligne est une cha√Æne, la diviser selon le s√©parateur
                                            if isinstance(row, str):
                                                data_rows.append(row.split(separator))
                                            # Si c'est d√©j√† une liste, l'utiliser telle quelle
                                            elif isinstance(row, list):
                                                data_rows.append(row)
                                    
                                    # V√©rifier si les donn√©es sont uniformes
                                    if data_rows:
                                        # D√©terminer le nombre maximum de colonnes dans les donn√©es
                                        max_cols = max(len(row) for row in data_rows)
                                        
                                        # Si le header a moins de colonnes que les donn√©es, ajuster
                                        if len(header) < max_cols:
                                            # Ajouter des colonnes manquantes
                                            header.extend([f"Col{i+1}" for i in range(len(header), max_cols)])
                                            st.info(f"L'en-t√™te a √©t√© compl√©t√© avec des noms de colonnes g√©n√©riques")
                                        
                                        # Cr√©er le DataFrame avec les donn√©es trait√©es
                                        try:
                                            # Uniformiser les donn√©es pour √©viter les erreurs
                                            uniform_data = []
                                            for row in data_rows:
                                                # Si la ligne a moins de colonnes que l'en-t√™te, ajouter des valeurs vides
                                                if len(row) < len(header):
                                                    row.extend([''] * (len(header) - len(row)))
                                                # Si la ligne a plus de colonnes que l'en-t√™te, tronquer
                                                elif len(row) > len(header):
                                                    row = row[:len(header)]
                                                uniform_data.append(row)
                                            
                                            df_csv = pd.DataFrame(uniform_data, columns=header)
                                            st.dataframe(df_csv, use_container_width=True)
                                        except Exception as e:
                                            st.warning(f"Erreur lors de la cr√©ation du DataFrame : {str(e)}")
                                            st.write("Donn√©es brutes (5 premi√®res lignes) :")
                                            for i, row in enumerate(data_rows[:5]):
                                                st.write(f"Ligne {i+1}: {row}")
                                    else:
                                        st.warning("Aucune donn√©e √† afficher")
                                else:
                                    st.warning(f"Format de donn√©es CSV non reconnu (type: {type(contenu_csv)})")
                                # Tenter d'afficher le contenu de mani√®re intelligente
                                if isinstance(contenu_csv, list):
                                    st.write("Liste d√©tect√©e, affichage des 5 premiers √©l√©ments:")
                                    st.code("\n".join([str(item) for item in contenu_csv[:5]]))
                                else:
                                    st.write("Contenu brut (extrait):")
                                    st.code(str(contenu_csv)[:500] + "..." if len(str(contenu_csv)) > 500 else str(contenu_csv))
                            except Exception as e:
                                st.error(f"Erreur lors de l'affichage du contenu CSV : {str(e)}")
                                st.info("Contenu brut (extrait) : " + str(meta.get('contenu_csv', ''))[:200] + "..." if len(str(meta.get('contenu_csv', ''))) > 200 else str(meta.get('contenu_csv', '')))
                        else:
                            st.info("Aucun aper√ßu CSV disponible pour cette m√©tadonn√©e.")
                    
                    with dict_tab:
                        if meta.get('dictionnaire'):
                            st.markdown("##### Dictionnaire des variables")
                            # Affichage du dictionnaire (code existant)
                            try:
                                dictionnaire = meta['dictionnaire']
                                # Si c'est une cha√Æne, essayer de la d√©coder en JSON
                                if isinstance(dictionnaire, str):
                                    try:
                                        dictionnaire = json.loads(dictionnaire)
                                    except json.JSONDecodeError as e:
                                        st.warning(f"Erreur lors du d√©codage JSON du dictionnaire : {str(e)}")
                                        st.info("Contenu brut : " + str(meta['dictionnaire'])[:200] + "...")
                                        continue  # Passer √† l'√©l√©ment suivant
                                
                                # V√©rifier si le dictionnaire a un format valide
                                if isinstance(dictionnaire, dict):
                                    # Assouplir la v√©rification du format - accepter diff√©rentes structures
                                    header = dictionnaire.get('header', [])
                                    data = dictionnaire.get('data', [])
                                    separator = dictionnaire.get('separator', ';')
                                    
                                    has_valid_data = len(data) > 0
                                    has_valid_header = len(header) > 0
                                    
                                    if has_valid_data and has_valid_header:
                                        st.caption(f"S√©parateur utilis√©: '{separator}'")
                                        
                                        # Traitement des donn√©es
                                        data_rows = []
                                        
                                        # Traiter chaque ligne de donn√©es
                                        for row in data:
                                            # Si la ligne est une cha√Æne, la diviser selon le s√©parateur
                                            if isinstance(row, str):
                                                data_rows.append(row.split(separator))
                                            # Si c'est d√©j√† une liste, l'utiliser telle quelle
                                            elif isinstance(row, list):
                                                data_rows.append(row)
                                    
                                    # Afficher une information sur la taille du dictionnaire
                                    total_rows = len(data_rows)
                                    st.info(f"Dictionnaire contenant {total_rows} variables")
                                    
                                    # V√©rifier si les donn√©es sont uniformes
                                    if data_rows:
                                        # D√©terminer le nombre maximum de colonnes dans les donn√©es
                                        max_cols = max(len(row) for row in data_rows)
                                        
                                        # Si le header a moins de colonnes que les donn√©es, ajuster
                                        if len(header) < max_cols:
                                            # Ajouter des colonnes manquantes
                                            header.extend([f"Col{i+1}" for i in range(len(header), max_cols)])
                                            st.info(f"L'en-t√™te a √©t√© compl√©t√© avec des noms de colonnes g√©n√©riques")
                                        
                                        # Uniformiser les donn√©es pour √©viter les erreurs
                                        uniform_data = []
                                        for row in data_rows:
                                            # Si la ligne a moins de colonnes que l'en-t√™te, ajouter des valeurs vides
                                            if len(row) < len(header):
                                                row.extend([''] * (len(header) - len(row)))
                                            # Si la ligne a plus de colonnes que l'en-t√™te, tronquer
                                            elif len(row) > len(header):
                                                row = row[:len(header)]
                                            uniform_data.append(row)
                                        
                                        # Pagination pour les grands dictionnaires
                                        if total_rows > 100:
                                            # Afficher un avertissement 
                                            st.warning(f"Le dictionnaire est volumineux. Affichage des 100 premi√®res lignes sur {total_rows}.")
                                            # Cr√©er le DataFrame avec les 100 premi√®res lignes
                                            df_dict = pd.DataFrame(uniform_data[:100], columns=header)
                                        else:
                                            # Cr√©er le DataFrame avec toutes les donn√©es
                                            df_dict = pd.DataFrame(uniform_data, columns=header)
                                        
                                        try:
                                            st.dataframe(df_dict, use_container_width=True)
                                        except Exception as e:
                                            st.warning(f"Erreur lors de la cr√©ation du DataFrame : {str(e)}")
                                            st.write("Donn√©es brutes (5 premi√®res lignes) :")
                                            for i, row in enumerate(uniform_data[:5]):
                                                st.write(f"Ligne {i+1}: {row}")
                                        
                                        # Proposer de t√©l√©charger le dictionnaire complet si volumineux
                                        if total_rows > 100:
                                            try:
                                                # Cr√©er un DataFrame complet pour le t√©l√©chargement
                                                df_full = pd.DataFrame(uniform_data, columns=header)
                                                # Convertir en CSV pour le t√©l√©chargement
                                                csv = df_full.to_csv(index=False)
                                                st.download_button(
                                                    label="T√©l√©charger le dictionnaire complet",
                                                    data=csv,
                                                    file_name="dictionnaire_variables.csv",
                                                    mime="text/csv"
                                                )
                                            except Exception as e:
                                                st.warning(f"Erreur lors de la cr√©ation du fichier de t√©l√©chargement : {str(e)}")
                                    else:
                                        # Format incomplet mais essayer d'afficher ce qu'on a
                                        if not has_valid_header and has_valid_data:
                                            st.warning("En-t√™te manquant dans le dictionnaire, utilisation d'en-t√™tes g√©n√©riques")
                                            # Cr√©er un en-t√™te g√©n√©rique bas√© sur la premi√®re ligne de donn√©es
                                            sample_row = data[0]
                                            if isinstance(sample_row, str):
                                                col_count = len(sample_row.split(separator))
                                            elif isinstance(sample_row, list):
                                                col_count = len(sample_row)
                                            else:
                                                col_count = 1
                                            
                                            header = [f"Colonne {i+1}" for i in range(col_count)]
                                            
                                            # Traiter les donn√©es comme avant
                                            data_rows = []
                                            for row in data:
                                                if isinstance(row, str):
                                                    data_rows.append(row.split(separator))
                                                elif isinstance(row, list):
                                                    data_rows.append(row)
                                            
                                            try:
                                                # Uniformiser les donn√©es
                                                uniform_data = []
                                                for row in data_rows:
                                                    if len(row) < len(header):
                                                        row.extend([''] * (len(header) - len(row)))
                                                    elif len(row) > len(header):
                                                        row = row[:len(header)]
                                                    uniform_data.append(row)
                                                
                                                # Limiter l'affichage si le dictionnaire est volumineux
                                                if len(uniform_data) > 100:
                                                    st.warning(f"Affichage limit√© aux 100 premi√®res lignes sur {len(uniform_data)}")
                                                    uniform_data = uniform_data[:100]
                                                
                                                df_dict = pd.DataFrame(uniform_data, columns=header)
                                                st.dataframe(df_dict, use_container_width=True)
                                            except Exception as e:
                                                st.error(f"Impossible de cr√©er un tableau pour le dictionnaire : {str(e)}")
                                                st.write("Donn√©es brutes (extrait) :")
                                                st.code(str(data[:5]))
                                        elif has_valid_header and not has_valid_data:
                                            st.warning("Aucune donn√©e trouv√©e dans le dictionnaire, affichage de l'en-t√™te uniquement")
                                            st.write("En-t√™te du dictionnaire :")
                                            st.code(header)
                                        else:
                                            st.warning("Format de donn√©es du dictionnaire non reconnu")
                                            st.write("Structure d√©tect√©e :")
                                            st.json(dictionnaire)
                                else:
                                    st.warning(f"Format de donn√©es du dictionnaire non reconnu (type: {type(dictionnaire)})")
                                    # Tenter d'afficher le contenu de mani√®re intelligente
                                    if isinstance(dictionnaire, list):
                                        st.write("Liste d√©tect√©e, affichage des 5 premiers √©l√©ments:")
                                        st.code("\n".join([str(item) for item in dictionnaire[:5]]))
                                    else:
                                        st.write("Contenu brut (extrait):")
                                        st.code(str(dictionnaire)[:500] + "..." if len(str(dictionnaire)) > 500 else str(dictionnaire))
                            except Exception as e:
                                st.error(f"Erreur lors de l'affichage du dictionnaire : {str(e)}")
                                # Afficher les 200 premiers caract√®res du contenu brut
                                st.info("Contenu brut (extrait) : " + str(meta.get('dictionnaire', ''))[:200] + "..." if len(str(meta.get('dictionnaire', ''))) > 200 else str(meta.get('dictionnaire', '')))
                        else:
                            st.info("Aucun dictionnaire de variables disponible pour cette m√©tadonn√©e.")
    
    # Fermeture du conteneur
    st.markdown('</div>', unsafe_allow_html=True)
else:
    st.warning("Aucune m√©tadonn√©e trouv√©e. Utilisez le formulaire de saisie pour en ajouter.")

# Section d'aide et informations
with st.expander("Aide et informations"):
    st.markdown("""
    ### Comment utiliser ce catalogue
    
    - **Recherche** : Saisissez un terme dans le champ de recherche pour filtrer les m√©tadonn√©es. La recherche s'effectue dans le nom de la base, le nom de la table, le producteur, la description, le sch√©ma, la source, la licence et la personne ayant rempli le formulaire.
    - **Filtre par sch√©ma** : Utilisez le menu d√©roulant pour filtrer par sch√©ma de base de donn√©es.
    - **Consulter les d√©tails** : Cochez la case "Afficher les d√©tails complets" pour voir toutes les informations, y compris le contenu CSV et le dictionnaire des variables si disponibles.
    
    ### Structure des m√©tadonn√©es
    
    Les m√©tadonn√©es sont structur√©es avec les informations suivantes :
    - **Informations de base** : Nom de la base, nom de la table, producteur, sch√©ma, granularit√© g√©ographique, mill√©sime, date de mise √† jour
    - **Informations suppl√©mentaires** : Source, fr√©quence de mise √† jour, licence, personne remplissant le formulaire
    - **Description** : Explication d√©taill√©e des donn√©es
    - **Contenu CSV** : Les premi√®res lignes du fichier pour comprendre sa structure
    - **Dictionnaire des variables** : Description d√©taill√©e des variables du jeu de donn√©es
    """)

# Section de mapping des colonnes (visible uniquement si expanded)
with st.expander("Mapping des colonnes de la base de donn√©es"):
    # R√©cup√©rer les colonnes de la base de donn√©es
    db_columns = get_metadata_columns()
    
    # D√©finir le mapping entre les colonnes de la base et les champs du formulaire
    column_mapping = {
        "id": "ID (auto-g√©n√©r√©)",
        "nom_table": "Nom de la table",
        "nom_base": "Nom de la base de donn√©es",
        "producteur": "Producteur de la donn√©e",
        "schema": "Sch√©ma du SGBD",
        "granularite_geo": "Granularit√© g√©ographique",
        "description": "Description",
        "millesime": "Mill√©sime/ann√©e",
        "date_maj": "Derni√®re mise √† jour",
        "source": "Source (URL)",
        "frequence_maj": "Fr√©quence de mises √† jour des donn√©es",
        "licence": "Licence d'utilisation des donn√©es",
        "envoi_par": "Personne remplissant le formulaire",
        "contact": "Contact (non utilis√© actuellement)",
        "mots_cles": "Mots-cl√©s (non utilis√© actuellement)",
        "notes": "Notes (non utilis√© actuellement)",
        "contenu_csv": "Contenu CSV",
        "dictionnaire": "Dictionnaire des variables",
        "created_at": "Date de cr√©ation de l'entr√©e (auto-g√©n√©r√©e)"
    }
    
    # Cr√©er un DataFrame pour afficher le mapping
    mapping_df = pd.DataFrame({
        "Colonne de la base de donn√©es": db_columns,
        "Champ du formulaire": [column_mapping.get(col, "Non mapp√©") for col in db_columns]
    })
    
    st.dataframe(mapping_df, use_container_width=True)

# Pied de page
st.markdown("---")
st.markdown("¬© 2025 - Syst√®me de Gestion des M√©tadonn√©es v1.0") 