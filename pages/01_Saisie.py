import streamlit as st
import pandas as pd
import json
from datetime import datetime
import os
from pathlib import Path
import sys
from pathlib import Path

# Ajout du r√©pertoire parent au PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))
from db_utils import init_db, save_metadata

# Configuration de la page
st.set_page_config(
    page_title="Saisie des M√©tadonn√©es",
    page_icon="üìù",
    layout="wide"
)

# Initialisation de la base de donn√©es
init_db()

# CSS pour le style du formulaire
st.markdown("""
<style>
    .stTextInput > label {
        font-weight: bold;
    }
    .required::after {
        content: " *";
        color: red;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
    .stTabs [data-baseweb="tab"] {
        padding: 1rem;
        font-size: 1.1rem;
    }
</style>
""", unsafe_allow_html=True)

# Titre et description
st.title("Saisie des m√©tadonn√©es")
st.write("Remplissez le formulaire ci-dessous pour ajouter de nouvelles m√©tadonn√©es.")

# Cr√©ation des onglets
tab1, tab2 = st.tabs(["Saisie manuelle", "Charger fichier"])

with tab1:
    with st.form("metadata_form"):
        st.subheader("Informations de base")
        
        # Champs de base - Modifications des libell√©s et descriptions
        col1, col2 = st.columns(2)
        with col1:
            schema = st.selectbox(
                "Sch√©ma du SGBD *", 
                ["economie", "education", "energie", "environnement", "geo", "logement", "mobilite", "population", "securite"],
                help="Sch√©ma de la table dans le SGBD Intelligence des Territoires"
            )
        with col2:
            nom_fichier = st.selectbox(
                "Nom de la base de donn√©es *", 
                ["opendata"],
                help="Nom de la table dans le SGBD Intelligence des Territoires"
            )
        
        col3, col4 = st.columns(2)
        with col3:
            nom_table = st.text_input(
                "Nom de la table *", 
                help="Nom de la table dans le SGBD Intelligence des Territoires"
            )
        with col4:
            nom_base = st.text_input(
                "Producteur de la donn√©e *",
                help="Nom de l'organisme pourvoyeur de la donn√©e"
            )
        
        # Dates
        col1, col2 = st.columns(2)
        with col1:
            annee = st.number_input(
                "Mill√©sime/ann√©e *", 
                min_value=1900,
                max_value=datetime.now().year,
                value=datetime.now().year,
                help="Ann√©e de r√©f√©rence des donn√©es"
            )
        with col2:
            date_maj = st.date_input(
                "Derni√®re mise √† jour *", 
                format="DD/MM/YYYY",
                help="Date de la derni√®re mise √† jour des donn√©es"
            )
        
        # Granularit√© g√©ographique
        granularite_geo = st.selectbox(
            "Granularit√© g√©ographique",
            ["IRIS", "Commune", "EPCI", "D√©partement", "R√©gion", "Carreau", "Adresse", "Coordonn√©es g√©ographiques"],
            help="Granularit√© g√©ographique la plus fine de la table de donn√©es"
        )
        
        # Description
        description = st.text_area(
            "Description *", 
            help="Description d√©taill√©e du contenu et de l'utilisation des donn√©es"
        )
        
        # Informations suppl√©mentaires
        st.subheader("Informations suppl√©mentaires")
        
        col1, col2 = st.columns(2)
        with col1:
            source = st.text_input(
                "Source (URL)", 
                help="URL ou r√©f√©rence de la source originale des donn√©es"
            )
        with col2:
            frequence_maj = st.selectbox(
                "Fr√©quence de mises √† jour des donn√©es",
                ["Annuelle", "Semestrielle", "Trimestrielle", "Mensuelle", "Quotidienne", "Ponctuelle"],
                help="Fr√©quence √† laquelle les donn√©es sont mises √† jour"
            )
            
        col3, col4 = st.columns(2)
        with col3:
            licence = st.selectbox(
                "Licence d'utilisation des donn√©es",
                ["Licence ouverte / Etalab", "Creative Commons", "Licence propri√©taire", "Autre"],
                help="Conditions d'utilisation des donn√©es"
            )
        with col4:
            envoi_par = st.text_input(
                "Personne remplissant le formulaire", 
                help="Nom de la personne qui remplit le formulaire"
            )
        
        # Contenu CSV
        st.subheader("Contenu CSV")
        
        with st.expander("D√©pliez", expanded=False):
            # D√©placement du s√©lecteur de s√©parateur sous le bouton "D√©pliez"
            separateur = st.radio("S√©parateur", [";", ","], horizontal=True)
            
            st.info("""
            Copiez-collez ici les 4 premi√®res lignes de la table. Format attendu :
            
            COD_VAR;LIB_VAR;LIB_VAR_LONG;COD_MOD;LIB_MOD;TYPE_VAR;LONG_VAR
            COM;Commune ou ARM;Code du d√©partement suivi du num√©ro de commune
            """)
            
            contenu_csv = st.text_area(
                "4 premi√®res lignes du CSV :", 
                height=300,
                help="Copiez-collez ici les 4 premi√®res lignes du fichier CSV"
            )
            
            if contenu_csv:
                try:
                    # V√©rification du format
                    lines = contenu_csv.strip().split('\n')
                    header = lines[0].split(separateur)
                    
                    # Affichage d'un aper√ßu
                    st.write("Aper√ßu des donn√©es (5 premi√®res lignes) :")
                    preview_data = []
                    for line in lines[1:6]:  # Afficher les 5 premi√®res lignes de donn√©es
                        preview_data.append(line.split(separateur))
                    st.table(preview_data)
                    
                    # Initialisation du dictionnaire metadata s'il n'existe pas
                    if "metadata" not in locals():
                        metadata = {}
                    
                    # Traitement du contenu CSV
                    if contenu_csv:
                        try:
                            lines = contenu_csv.strip().split('\n')
                            header = lines[0].split(separateur)
                            
                            # Transformation des lignes en liste pour garantir la coh√©rence
                            data_rows = []
                            for line in lines[1:]:
                                if line.strip():  # Ignorer les lignes vides
                                    data_rows.append(line.split(separateur))
                            
                            metadata["contenu_csv"] = {
                                "header": header,
                                "data": data_rows,  # Stockage sous forme de liste de listes
                                "separator": separateur
                            }
                        except Exception as e:
                            st.warning(f"Erreur lors de l'analyse du CSV : {str(e)}")
                except Exception as e:
                    st.error(f"Erreur lors de l'analyse du CSV : {str(e)}")
        
        # Dictionnaire des variables
        st.subheader("Dictionnaire des variables")
        with st.expander("D√©pliez", expanded=False):
            # Ajout du s√©lecteur de s√©parateur pour le dictionnaire
            dict_separateur = st.radio("S√©parateur du dictionnaire", [";", ","], horizontal=True)
            
            st.info("""
            Copiez-collez ici le dictionnaire des variables. Format attendu :
            
            P20_POP1564;Pop 15-64 ans en 2020 (princ);Nombre de personnes de 15 √† 64 ans;;;NUM;17
            """)
            
            dictionnaire = st.text_area(
                "Dictionnaire des variables :", 
                height=300,
                help="Copiez-collez ici le dictionnaire des variables"
            )
            
            if dictionnaire:
                try:
                    # V√©rification du format
                    lines = dictionnaire.strip().split('\n')
                    header = lines[0].split(dict_separateur)  # Utiliser le s√©parateur choisi
                    expected_header = ['COD_VAR', 'LIB_VAR', 'LIB_VAR_LONG', 'COD_MOD', 'LIB_MOD', 'TYPE_VAR', 'LONG_VAR']
                    
                    # Au lieu de v√©rifier que les en-t√™tes sont identiques, on v√©rifie juste le nombre de colonnes
                    if len(header) < 3:
                        st.warning("Format d'en-t√™te potentiellement incorrect. Le dictionnaire doit avoir au moins 3 colonnes.")
                    
                    # Affichage d'un aper√ßu
                    st.write("Aper√ßu des donn√©es (5 premi√®res lignes) :")
                    preview_data = []
                    for line in lines[1:6]:  # Afficher les 5 premi√®res lignes de donn√©es
                        preview_data.append(line.split(dict_separateur))  # Utiliser le s√©parateur choisi
                    st.table(preview_data)
                    
                    # Initialisation du dictionnaire metadata s'il n'existe pas
                    if "metadata" not in locals():
                        metadata = {}
                    
                    # Traitement du dictionnaire des variables
                    if dictionnaire:
                        try:
                            lines = dictionnaire.strip().split('\n')
                            # Tentative de d√©duire les colonnes √† partir des donn√©es
                            sample_line = lines[0].split(dict_separateur)  # Utiliser le s√©parateur choisi
                            
                            # D√©finition des colonnes attendues
                            expected_columns = ['COD_VAR', 'LIB_VAR', 'LIB_VAR_LONG', 'COD_MOD', 'LIB_MOD', 'TYPE_VAR', 'LONG_VAR']
                            
                            # V√©rifier s'il y a le bon nombre de colonnes (optionnel)
                            if len(sample_line) != len(expected_columns):
                                st.warning(f"Le nombre de colonnes ({len(sample_line)}) ne correspond pas au nombre attendu ({len(expected_columns)}). Le dictionnaire sera tout de m√™me trait√©.")
                            
                            # Transformation des lignes en liste pour garantir la coh√©rence
                            data_rows = []
                            for line in lines[1:]:
                                if line.strip():  # Ignorer les lignes vides
                                    data_rows.append(line.split(dict_separateur))  # Utiliser le s√©parateur choisi
                            
                            # Afficher un avertissement si le dictionnaire est tr√®s volumineux
                            if len(data_rows) > 1000:
                                st.warning(f"Le dictionnaire est tr√®s volumineux ({len(data_rows)} lignes). " +
                                          "Les performances peuvent √™tre affect√©es. " +
                                          "Seules les 2000 premi√®res lignes seront stock√©es.")
                            
                            # Utilisation des colonnes d√©duites ou des colonnes attendues selon la situation
                            metadata["dictionnaire"] = {
                                "header": expected_columns[:len(sample_line)],
                                "data": data_rows,  # Stockage sous forme de liste de listes
                                "separator": dict_separateur  # Utiliser le s√©parateur choisi
                            }
                        except Exception as e:
                            st.warning(f"Erreur lors de l'analyse du dictionnaire : {str(e)}")
                except Exception as e:
                    st.error(f"Erreur lors de l'analyse du dictionnaire : {str(e)}")
        
        # Bouton de soumission
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            submitted = st.form_submit_button(
                "Sauvegarder les m√©tadonn√©es", 
                type="primary",
                use_container_width=True
            )
        
        if submitted:
            if not nom_fichier:
                st.error("Veuillez d'abord saisir un nom de fichier")
            else:
                try:
                    # Pr√©paration du dictionnaire de m√©tadonn√©es
                    metadata = {"contenu_csv": {}, "dictionnaire": {}}
                    
                    # Traitement du contenu CSV
                    if contenu_csv:
                        try:
                            lines = contenu_csv.strip().split('\n')
                            header = lines[0].split(separateur)
                            
                            # Transformation des lignes en liste pour garantir la coh√©rence
                            data_rows = []
                            for line in lines[1:]:
                                if line.strip():  # Ignorer les lignes vides
                                    data_rows.append(line.split(separateur))
                            
                            metadata["contenu_csv"] = {
                                "header": header,
                                "data": data_rows,  # Stockage sous forme de liste de listes
                                "separator": separateur
                            }
                        except Exception as e:
                            st.warning(f"Erreur lors de l'analyse du CSV : {str(e)}")
                    
                    # Traitement du dictionnaire des variables
                    if dictionnaire:
                        try:
                            lines = dictionnaire.strip().split('\n')
                            # Tentative de d√©duire les colonnes √† partir des donn√©es
                            sample_line = lines[0].split(dict_separateur)  # Utiliser le s√©parateur choisi
                            
                            # D√©finition des colonnes attendues
                            expected_columns = ['COD_VAR', 'LIB_VAR', 'LIB_VAR_LONG', 'COD_MOD', 'LIB_MOD', 'TYPE_VAR', 'LONG_VAR']
                            
                            # V√©rifier s'il y a le bon nombre de colonnes (optionnel)
                            if len(sample_line) != len(expected_columns):
                                st.warning(f"Le nombre de colonnes ({len(sample_line)}) ne correspond pas au nombre attendu ({len(expected_columns)}). Le dictionnaire sera tout de m√™me trait√©.")
                            
                            # Transformation des lignes en liste pour garantir la coh√©rence
                            data_rows = []
                            for line in lines[1:]:
                                if line.strip():  # Ignorer les lignes vides
                                    data_rows.append(line.split(dict_separateur))  # Utiliser le s√©parateur choisi
                            
                            # Afficher un avertissement si le dictionnaire est tr√®s volumineux
                            if len(data_rows) > 1000:
                                st.warning(f"Le dictionnaire est tr√®s volumineux ({len(data_rows)} lignes). " +
                                          "Les performances peuvent √™tre affect√©es. " +
                                          "Seules les 2000 premi√®res lignes seront stock√©es.")
                            
                            # Utilisation des colonnes d√©duites ou des colonnes attendues selon la situation
                            metadata["dictionnaire"] = {
                                "header": expected_columns[:len(sample_line)],
                                "data": data_rows,  # Stockage sous forme de liste de listes
                                "separator": dict_separateur  # Utiliser le s√©parateur choisi
                            }
                        except Exception as e:
                            st.warning(f"Erreur lors de l'analyse du dictionnaire : {str(e)}")
                    
                    # Cr√©ation du dictionnaire de m√©tadonn√©es
                    metadata.update({
                        "nom_fichier": nom_fichier,
                        "informations_base": {
                            "nom_table": nom_table,
                            "nom_base": nom_base,
                            "schema": schema,
                            "description": description,
                            "date_creation": str(annee),
                            "date_maj": date_maj.strftime("%Y-%m-%d") if date_maj else None,
                            "source": source,
                            "frequence_maj": frequence_maj,
                            "licence": licence,
                            "envoi_par": envoi_par,
                            "separateur_csv": separateur,
                            "granularite_geo": granularite_geo
                        }
                    })

                    # Sauvegarde dans la base de donn√©es
                    succes, message = save_metadata(metadata)
                    if succes:
                        st.success(message)
                        # Cr√©ation d'un encadr√© de succ√®s bien visible
                        st.balloons()
                        st.success("""
                        ### ‚úÖ M√©tadonn√©es sauvegard√©es avec succ√®s!
                        
                        Vos m√©tadonn√©es sont maintenant disponibles dans le catalogue.
                        Vous pouvez les consulter dans l'onglet "Catalogue".
                        """)
                    else:
                        st.error(f"Erreur lors de la sauvegarde : {message}")
                        st.error("Veuillez v√©rifier les logs pour plus de d√©tails.")

                    # Sauvegarde locale en JSON
                    try:
                        json_path = os.path.join("metadata", f"{nom_fichier}.json")
                        os.makedirs("metadata", exist_ok=True)
                        with open(json_path, "w", encoding="utf-8") as f:
                            json.dump(metadata, f, ensure_ascii=False, indent=4)
                        st.success(f"M√©tadonn√©es sauvegard√©es localement dans {json_path}")
                    except Exception as e:
                        st.error(f"Erreur lors de la sauvegarde locale en JSON : {str(e)}")

                    # Sauvegarde locale en TXT
                    try:
                        txt_path = os.path.join("metadata", f"{nom_fichier}.txt")
                        with open(txt_path, "w", encoding="utf-8") as f:
                            f.write(f"Nom de la base de donn√©es : {nom_fichier}\n")
                            f.write(f"Sch√©ma du SGBD : {schema}\n")
                            f.write(f"Nom de la table : {nom_table}\n")
                            f.write(f"Producteur de la donn√©e : {nom_base}\n")
                            f.write(f"Granularit√© g√©ographique : {granularite_geo}\n")
                            f.write(f"Description : {description}\n")
                            f.write(f"Mill√©sime/ann√©e : {annee}\n")
                            if date_maj:
                                f.write(f"Derni√®re mise √† jour : {date_maj.strftime('%Y-%m-%d')}\n")
                            f.write(f"Source : {source}\n")
                            f.write(f"Fr√©quence de mises √† jour des donn√©es : {frequence_maj}\n")
                            f.write(f"Licence d'utilisation des donn√©es : {licence}\n")
                            f.write(f"Personne remplissant le formulaire : {envoi_par}\n")
                            f.write(f"S√©parateur CSV : {separateur}\n")
                            if contenu_csv:
                                f.write("\nContenu CSV :\n")
                                f.write(contenu_csv)
                            if dictionnaire:
                                f.write("\nDictionnaire des variables :\n")
                                f.write(dictionnaire)
                        st.success(f"M√©tadonn√©es sauvegard√©es localement dans {txt_path}")
                    except Exception as e:
                        st.error(f"Erreur lors de la sauvegarde locale en TXT : {str(e)}")
                        
                except Exception as e:
                    st.error(f"Erreur inattendue : {str(e)}")
                    st.error("Veuillez v√©rifier les logs pour plus de d√©tails.")

with tab2:
    st.subheader("Structure des donn√©es")
    uploaded_file = st.file_uploader("Choisir un fichier CSV", type="csv")
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("Aper√ßu des donn√©es :")
        st.dataframe(df.head())
        st.write("Structure des colonnes :")
        st.dataframe(pd.DataFrame({
            'Type': df.dtypes,
            'Non-nuls': df.count(),
            'Nulls': df.isna().sum()
        }))

# Section d'aide
with st.expander("Aide pour la saisie"):
    st.markdown("""
    ### Champs obligatoires
    Les champs marqu√©s d'un ast√©risque (*) sont obligatoires.
    
    - **Sch√©ma du SGBD** : Sch√©ma de la table dans le SGBD Intelligence des Territoires
    - **Nom de la table** : Nom de la table dans le SGBD Intelligence des Territoires
    - **Table de la base de donn√©es** : Nom de la table dans le SGBD Intelligence des Territoires
    - **Producteur de la donn√©e** : Nom de l'organisme pourvoyeur de la donn√©e
    - **Mill√©sime/ann√©e** : Ann√©e de r√©f√©rence des donn√©es
    - **Derni√®re mise √† jour** : Date de la derni√®re mise √† jour des donn√©es
    - **Description** : Description d√©taill√©e du contenu des donn√©es
    
    ### Conseils de saisie
    1. **Informations de base**
       - Le nom de la table est actuellement limit√© √† certaines valeurs pr√©d√©finies
       - Le sch√©ma doit correspondre √† l'une des cat√©gories pr√©d√©finies
       - Le producteur doit √™tre l'organisme source des donn√©es
       - Le mill√©sime doit correspondre √† l'ann√©e de r√©f√©rence des donn√©es
    
    2. **Description**
       - Soyez aussi pr√©cis que possible dans la description
    
    3. **Informations suppl√©mentaires**
       - Indiquez la personne qui remplit le formulaire
       - Pr√©cisez la source originale des donn√©es (URL ou r√©f√©rence)
       - S√©lectionnez la fr√©quence de mise √† jour appropri√©e
       - Choisissez la licence qui correspond aux conditions d'utilisation
    
    4. **Donn√©es CSV**
       - Copiez-collez les premi√®res lignes du fichier CSV
       - Indiquez le s√©parateur utilis√© (par d√©faut, point-virgule)
       - Ajoutez le dictionnaire des variables si le fichier CSV est disponible
    """)

# Pied de page
st.markdown("---")
st.markdown("¬© 2025 - Syst√®me de Gestion des M√©tadonn√©es") 