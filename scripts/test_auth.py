#!/usr/bin/env python3
"""
Script de test de l'authentification - VERSION S√âCURIS√âE
Ce script teste la configuration d'authentification sans exposer d'informations sensibles
"""

import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader
import sys
import os
import bcrypt

def test_auth_config():
    """Test la configuration d'authentification de mani√®re s√©curis√©e"""
    
    print('=== TEST DE CONFIGURATION D\'AUTHENTIFICATION ===')
    print(f'R√©pertoire de travail : {os.getcwd()}')
    
    config_path = 'config.yaml'
    print(f'Fichier config.yaml pr√©sent : {os.path.isfile(config_path)}')
    
    if not os.path.isfile(config_path):
        print('‚ùå ERREUR : config.yaml introuvable')
        return False
    
    try:
        # Test de chargement du YAML
        with open(config_path, 'r', encoding='utf-8') as file:
            config = yaml.load(file, Loader=SafeLoader)
        
        print('‚úÖ Chargement YAML r√©ussi')
        
        # V√©rification de la structure (sans exposer les valeurs)
        required_keys = ['credentials', 'cookie', 'preauthorized']
        for key in required_keys:
            if key in config:
                print(f'‚úÖ Section "{key}" pr√©sente')
            else:
                print(f'‚ùå Section "{key}" manquante')
                return False
        
        # V√©rification des credentials (structure seulement)
        if 'usernames' in config['credentials']:
            user_count = len(config['credentials']['usernames'])
            print(f'‚úÖ {user_count} utilisateur(s) configur√©(s)')
            
            # V√©rification que tous les utilisateurs ont un hash bcrypt valide
            for username, user_data in config['credentials']['usernames'].items():
                if 'password' in user_data:
                    password_hash = user_data['password']
                    if password_hash.startswith('$2b$') and len(password_hash) == 60:
                        print(f'‚úÖ Utilisateur "{username}" : hash bcrypt valide')
                    else:
                        print(f'‚ùå Utilisateur "{username}" : hash bcrypt invalide')
                        return False
                else:
                    print(f'‚ùå Utilisateur "{username}" : pas de mot de passe')
                    return False
        else:
            print('‚ùå Section "usernames" manquante dans credentials')
            return False
        
        # V√©rification des param√®tres de cookie
        cookie_config = config['cookie']
        if 'key' in cookie_config and 'name' in cookie_config:
            key_length = len(cookie_config['key'])
            print(f'‚úÖ Configuration cookie valide (cl√© de {key_length} caract√®res)')
            
            # Alerte si cl√© faible d√©tect√©e
            if cookie_config['key'] in ['some_random_key', 'changeme', 'default']:
                print('‚ö†Ô∏è  ALERTE S√âCURIT√â : Cl√© de cookie par d√©faut d√©tect√©e')
                print('‚ö†Ô∏è  Utilisez le script generate_secure_config.py')
                return False
        else:
            print('‚ùå Configuration cookie incompl√®te')
            return False
        
        print('‚úÖ Configuration d\'authentification valide')
        return True
        
    except yaml.YAMLError as e:
        print(f'‚ùå Erreur YAML : {e}')
        return False
    except Exception as e:
        print(f'‚ùå Erreur g√©n√©rale : {e}')
        return False

def test_bcrypt_functionality():
    """Test le fonctionnement de bcrypt (sans exposer de donn√©es sensibles)"""
    
    print('\n=== TEST DE LA FONCTIONNALIT√â BCRYPT ===')
    
    try:
        # Test avec un mot de passe temporaire
        test_password = 'test_temporaire_12345'
        test_hash = bcrypt.hashpw(test_password.encode('utf-8'), bcrypt.gensalt(rounds=12))
        
        # V√©rification que le hash est correct
        if bcrypt.checkpw(test_password.encode('utf-8'), test_hash):
            print('‚úÖ Bcrypt fonctionne correctement')
            return True
        else:
            print('‚ùå Bcrypt ne fonctionne pas correctement')
            return False
            
    except Exception as e:
        print(f'‚ùå Erreur bcrypt : {e}')
        return False

if __name__ == "__main__":
    print('üîê SCRIPT DE TEST D\'AUTHENTIFICATION S√âCURIS√â')
    print('üìù Ce script ne r√©v√®le aucune information sensible')
    print()
    
    # Tests
    config_ok = test_auth_config()
    bcrypt_ok = test_bcrypt_functionality()
    
    print('\n=== R√âSUM√â DES TESTS ===')
    if config_ok and bcrypt_ok:
        print('‚úÖ Tous les tests sont pass√©s')
        print('üîê Configuration d\'authentification pr√™te')
    else:
        print('‚ùå Certains tests ont √©chou√©')
        print('‚ö†Ô∏è  V√©rifiez la configuration avant d√©ploiement')
        
    print('\nüí° Pour g√©n√©rer une configuration s√©curis√©e :')
    print('    python scripts/generate_secure_config.py') 