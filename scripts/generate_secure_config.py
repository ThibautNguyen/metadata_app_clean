#!/usr/bin/env python3
"""
Script de g√©n√©ration d'une configuration d'authentification s√©curis√©e
G√©n√®re des mots de passe forts et des cl√©s cryptographiquement s√©curis√©es
"""

import bcrypt
import secrets
import string
import yaml
import os
from datetime import datetime

def generate_strong_password(length=24):
    """G√©n√®re un mot de passe cryptographiquement fort"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def generate_secure_key(length=64):
    """G√©n√®re une cl√© secr√®te cryptographiquement s√©curis√©e"""
    return secrets.token_urlsafe(length)

def hash_password(password):
    """Hash un mot de passe avec bcrypt et salt fort"""
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(rounds=14)).decode('utf-8')

def generate_secure_config():
    """G√©n√®re une configuration d'authentification s√©curis√©e"""
    
    # G√©n√©ration d'identifiants forts
    admin_password = generate_strong_password(24)
    cookie_key = generate_secure_key(64)
    
    # Hash s√©curis√© du mot de passe
    password_hash = hash_password(admin_password)
    
    # Configuration s√©curis√©e
    secure_config = {
        'credentials': {
            'usernames': {
                'admin': {
                    'email': 'admin@collectivite.fr',  # √Ä adapter
                    'name': 'Administrateur',
                    'password': password_hash
                }
            }
        },
        'cookie': {
            'expiry_days': 7,  # Dur√©e r√©duite pour plus de s√©curit√©
            'key': cookie_key,
            'name': 'streamlit_auth_cookie'
        },
        'preauthorized': {
            'emails': [
                'admin@collectivite.fr'  # √Ä adapter
            ]
        }
    }
    
    # Sauvegarde de la configuration
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    config_filename = f'config_secure_{timestamp}.yaml'
    
    with open(config_filename, 'w', encoding='utf-8') as f:
        yaml.dump(secure_config, f, default_flow_style=False, allow_unicode=True)
    
    # Sauvegarde des identifiants (√† stocker en s√©curit√©)
    credentials_filename = f'CREDENTIALS_ADMIN_{timestamp}.txt'
    with open(credentials_filename, 'w', encoding='utf-8') as f:
        f.write("=== IDENTIFIANTS ADMINISTRATEUR ===\n")
        f.write(f"G√©n√©r√© le : {datetime.now()}\n")
        f.write(f"Utilisateur : admin\n")
        f.write(f"Mot de passe : {admin_password}\n")
        f.write(f"Email : admin@collectivite.fr\n")
        f.write("\n=== CL√âS TECHNIQUES ===\n")
        f.write(f"Cookie key : {cookie_key}\n")
        f.write(f"Password hash : {password_hash}\n")
        f.write("\n=== S√âCURIT√â ===\n")
        f.write("‚ö†Ô∏è  STOCKEZ CE FICHIER EN LIEU S√õR\n")
        f.write("‚ö†Ô∏è  NE JAMAIS COMMITTER SUR GIT\n")
        f.write("‚ö†Ô∏è  SUPPRIMEZ CE FICHIER APR√àS USAGE\n")
    
    print("‚úÖ Configuration s√©curis√©e g√©n√©r√©e !")
    print(f"üìÑ Fichier config : {config_filename}")
    print(f"üîê Identifiants : {credentials_filename}")
    print(f"üë§ Utilisateur : admin")
    print(f"üîë Mot de passe : {admin_password}")
    print("\nüö® ACTIONS REQUISES :")
    print("1. Remplacez config.yaml par le nouveau fichier")
    print("2. Stockez les identifiants en lieu s√ªr")
    print("3. Supprimez les anciens fichiers compromis")
    print("4. Testez la connexion avec les nouveaux identifiants")

if __name__ == "__main__":
    generate_secure_config() 