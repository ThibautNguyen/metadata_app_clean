#!/usr/bin/env python3
"""
Script pour ex√©cuter l'import de la table sirene_geo_2025_T2
"""

import psycopg2
import psycopg2.extras
import csv
import time
import os

def execute_sirene_import():
    """Ex√©cuter l'import de la table sirene_geo_2025_T2"""
    
    csv_file = r'C:\Users\thiba\OneDrive\Documents\Data\economie\geo-Sirene\StockEtablissement\2025-06\GeolocalisationEtablissement_Sirene_pour_etudes_statistiques_utf8.csv'
    
    try:
        # V√©rifier l'existence du fichier
        if not os.path.exists(csv_file):
            print(f"‚ùå Fichier non trouv√©: {csv_file}")
            return False
            
        # Configuration locale
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            database="opendata",
            user="cursor_ai",
            password="cursor_ai_is_quite_awesome"
        )
        
        print("‚úÖ Connexion √©tablie")
        cursor = conn.cursor()
        
        # V√©rifier si la table existe et qui en est propri√©taire
        cursor.execute("""
            SELECT schemaname, tablename, tableowner 
            FROM pg_tables 
            WHERE schemaname = 'economie' 
            AND tablename = 'sirene_geo_2025_t2';
        """)
        existing_table = cursor.fetchone()
        
        table_name = "sirene_geo_2025_t2"
        
        if existing_table:
            print(f"‚ö†Ô∏è  Table existante trouv√©e, propri√©taire: {existing_table[2]}")
            # Utiliser un nom diff√©rent si on n'est pas propri√©taire
            table_name = "sirene_geo_2025_t2_new"
            print(f"üìù Utilisation du nom: {table_name}")
        
        # √âtape 1: Suppression de la table si elle existe ET si on en est propri√©taire
        print(f"\nüóëÔ∏è  √âtape 1: Suppression de la table {table_name} si elle existe...")
        cursor.execute(f"DROP TABLE IF EXISTS economie.{table_name};")
        conn.commit()
        print("‚úÖ Table supprim√©e ou n'existait pas")
        
        # √âtape 2: Cr√©ation de la table
        print(f"\nüèóÔ∏è  √âtape 2: Cr√©ation de la nouvelle table {table_name}...")
        create_table_sql = f"""
        CREATE TABLE economie.{table_name} (
            siret TEXT,
            x TEXT,
            y TEXT,
            qualite_xy TEXT,
            epsg TEXT,
            plg_qp24 TEXT,
            plg_iris TEXT,
            plg_zus TEXT,
            plg_qp15 TEXT,
            plg_qva TEXT,
            plg_code_commune TEXT,
            distance_precision TEXT,
            qualite_qp24 TEXT,
            qualite_iris TEXT,
            qualite_zus TEXT,
            qualite_qp15 TEXT,
            qualite_qva TEXT,
            y_latitude TEXT,
            x_longitude TEXT
        );
        """
        cursor.execute(create_table_sql)
        conn.commit()
        print("‚úÖ Table cr√©√©e")
        
        # √âtape 3: Import des donn√©es avec Python
        print("\nüì• √âtape 3: Import des donn√©es via Python (cela peut prendre plusieurs minutes...)") 
        start_time = time.time()
        
        # Pr√©parer la requ√™te d'insertion
        insert_sql = f"""
        INSERT INTO economie.{table_name} (
            siret, x, y, qualite_xy, epsg, plg_qp24, plg_iris, plg_zus, 
            plg_qp15, plg_qva, plg_code_commune, distance_precision, 
            qualite_qp24, qualite_iris, qualite_zus, qualite_qp15, 
            qualite_qva, y_latitude, x_longitude
        ) VALUES %s
        """
        
        # Lire et ins√©rer le fichier CSV par chunks
        chunk_size = 10000
        total_inserted = 0
        
        with open(csv_file, 'r', encoding='utf-8') as file:
            csv_reader = csv.reader(file, delimiter=';')
            
            # Ignorer l'en-t√™te
            header = next(csv_reader)
            print(f"üìã Colonnes du CSV: {len(header)} colonnes")
            
            chunk = []
            for row_num, row in enumerate(csv_reader, 1):
                # Normaliser la ligne √† 19 colonnes (ajouter des valeurs vides si n√©cessaire)
                normalized_row = row + [''] * (19 - len(row)) if len(row) < 19 else row[:19]
                chunk.append(tuple(normalized_row))
                
                # Ins√©rer par chunks
                if len(chunk) >= chunk_size:
                    psycopg2.extras.execute_values(
                        cursor, insert_sql, chunk, template=None, page_size=1000
                    )
                    total_inserted += len(chunk)
                    print(f"  üìä {total_inserted:,} lignes ins√©r√©es...")
                    chunk = []
                    conn.commit()
                
                # Affichage de progression pour gros fichiers
                if row_num % 100000 == 0:
                    elapsed = time.time() - start_time
                    print(f"  ‚è±Ô∏è  Trait√© {row_num:,} lignes en {elapsed:.1f}s")
            
            # Ins√©rer le dernier chunk
            if chunk:
                psycopg2.extras.execute_values(
                    cursor, insert_sql, chunk, template=None, page_size=1000
                )
                total_inserted += len(chunk)
                conn.commit()
        
        end_time = time.time()
        duration = end_time - start_time
        
        # V√©rification du nombre de lignes import√©es
        cursor.execute(f"SELECT COUNT(*) FROM economie.{table_name};")
        count = cursor.fetchone()[0]
        
        print(f"‚úÖ Import termin√© !")
        print(f"‚è±Ô∏è  Dur√©e: {duration:.2f} secondes")
        print(f"üìä Nombre de lignes import√©es: {count:,}")
        print(f"üóÇÔ∏è  Table cr√©√©e: economie.{table_name}")
        
        cursor.close()
        conn.close()
        
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå Erreur PostgreSQL : {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Import de la table sirene_geo_2025_t2")
    print("=" * 60)
    
    if execute_sirene_import():
        print("\n‚úÖ Import r√©ussi !")
    else:
        print("\n‚ùå √âchec de l'import") 